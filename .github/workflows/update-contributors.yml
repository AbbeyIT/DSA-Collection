name: 🏆 Update Contributors

on:
  push:
    branches: 
      - main
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: write
  pull-requests: write

jobs:
  update-contributors:
    runs-on: ubuntu-latest
    # Run on push to main, manual trigger, or when PR is merged
    if: |
      github.event_name == 'push' || 
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        ref: main
        token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: 🏆 Update contributors list
      run: |
        echo "🔍 Fetching contributors from GitHub API..."
        
        # Fetch contributors and create HTML
        curl -s "https://api.github.com/repos/${{ github.repository }}/contributors?per_page=100" | \
        jq -r '.[] | select(.type != "Bot") | "<img src=\"\(.avatar_url)&s=50\" width=\"50\" height=\"50\" alt=\"\(.login)\" />"' | \
        {
          echo "<div align=\"center\">"
          echo "  <a href=\"https://github.com/${{ github.repository }}/graphs/contributors\">"
          cat
          echo "  </a>"
          echo "</div>"
        } > contributors.html

        echo "📄 Contributors HTML generated:"
        cat contributors.html
        echo ""

        # Verify README.md exists
        if [ ! -f "README.md" ]; then
          echo "❌ ERROR: README.md not found!"
          exit 1
        fi

        echo "✅ README.md found"
        echo "📝 Checking for contributor tags..."
        
        # Check if tags exist
        if ! grep -q "<!-- CONTRIBUTORS_LIST -->" README.md; then
          echo "❌ ERROR: <!-- CONTRIBUTORS_LIST --> tag not found in README.md"
          exit 1
        fi
        
        if ! grep -q "<!-- CONTRIBUTORS_LIST_END -->" README.md; then
          echo "❌ ERROR: <!-- CONTRIBUTORS_LIST_END --> tag not found in README.md"
          exit 1
        fi
        
        echo "✅ Both tags found in README.md"
        echo "🔄 Updating README.md with contributors..."

        # Update README.md with better error handling
        python3 << 'EOF'
        import re
        import sys

        try:
            # Read README
            print("📖 Reading README.md...")
            with open('README.md', 'r', encoding='utf-8') as f:
                text = f.read()
            print(f"✅ README.md read successfully ({len(text)} characters)")
            
            # Read contributors HTML
            print("📖 Reading contributors.html...")
            with open('contributors.html', 'r', encoding='utf-8') as c:
                contributors_html = c.read().strip()
            print(f"✅ Contributors HTML read successfully ({len(contributors_html)} characters)")
            
            # Check if tags exist
            if '<!-- CONTRIBUTORS_LIST -->' not in text:
                print("❌ ERROR: Start tag not found in README.md")
                sys.exit(1)
            
            if '<!-- CONTRIBUTORS_LIST_END -->' not in text:
                print("❌ ERROR: End tag not found in README.md")
                sys.exit(1)
            
            # Replace everything between the tags
            print("🔄 Replacing content between tags...")
            new_text = re.sub(
                r'<!-- CONTRIBUTORS_LIST -->.*?<!-- CONTRIBUTORS_LIST_END -->',
                f'<!-- CONTRIBUTORS_LIST -->\n{contributors_html}\n<!-- CONTRIBUTORS_LIST_END -->',
                text,
                flags=re.DOTALL
            )
            
            # Verify replacement occurred
            if new_text == text:
                print("⚠️  WARNING: No changes detected after replacement")
            else:
                print(f"✅ Content replaced successfully")
            
            # Write back to README
            print("💾 Writing updated README.md...")
            with open('README.md', 'w', encoding='utf-8') as f:
                f.write(new_text)
            print("✅ README.md updated successfully!")
            
        except Exception as e:
            print(f"❌ ERROR: {str(e)}")
            import traceback
            traceback.print_exc()
            sys.exit(1)
        EOF

        echo ""
        echo "✅ Contributors list update completed!"

    - name: 📈 Update language statistics
      run: |
        echo "📈 Updating language statistics..."

        # Count files by language
        cpp_files=$(find CPP/ -name "*.cpp" 2>/dev/null | wc -l || echo 0)
        java_files=$(find Java/ -name "*.java" 2>/dev/null | wc -l || echo 0)
        python_files=$(find Python/ -name "*.py" 2>/dev/null | wc -l || echo 0)

        total_implementations=$((cpp_files + java_files + python_files))

        echo "📊 Language Statistics:"
        echo "C++: $cpp_files files"
        echo "Java: $java_files files"
        echo "Python: $python_files files"
        echo "Total: $total_implementations implementations"

        # Count supported languages
        supported_languages=3 # Base languages: C++, Java, Python

        echo "Supported languages: $supported_languages"

        # Update README stats
        if [ -f "README.md" ]; then
          sed -i "s/💻 \*\*[0-9]*+ Languages\*\*/💻 **${supported_languages}+ Languages**/g" README.md
        fi

    - name: 📅 Update last modified date
      run: |
        echo "📅 Updating last modified date..."
        current_date=$(date +"%B %Y")

        if [ -f "HALL_OF_FAME.md" ]; then
          sed -i "s/\*Last updated: .* [0-9]*\*/\*Last updated: $current_date\*/g" HALL_OF_FAME.md
          echo "✅ Updated last modified date in HALL_OF_FAME.md"
        fi

    - name: 🔍 Check for changes
      id: changes
      run: |
        echo "🔍 Checking for changes in tracked files..."
        echo ""
        
        # Show git status
        echo "📊 Git Status:"
        git status --short
        echo ""
        
        # Show detailed diff
        if ! git diff --quiet; then
          echo "📝 Changes detected in:"
          git diff --name-only
          echo ""
          echo "📋 Detailed changes:"
          git diff --stat
          echo ""
          echo "has_changes=true" >> $GITHUB_OUTPUT
        else
          echo "ℹ️  No changes to commit"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        fi

    - name: 💾 Commit and Push to Main
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        echo "⚙️  Configuring git..."
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"

        echo "📦 Adding changed files..."
        git add README.md HALL_OF_FAME.md

        echo "💬 Creating commit..."
        git commit -m "🏆 Auto-update contributor statistics [skip ci]"

        echo "🚀 Pushing to main..."
        if git push origin main; then
          echo "✅ Successfully pushed to main!"
        else
          echo "❌ Failed to push to main"
          echo ""
          echo "⚠️  If you're seeing branch protection errors, you need to:"
          echo "1. Create a Personal Access Token (PAT) with 'repo' scope"
          echo "2. Add it as a repository secret named 'PAT_TOKEN'"
          echo "3. The workflow will automatically use it to bypass branch protection"
          exit 1
        fi

    - name: 📋 Generate summary (with changes)
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        echo "🏆 Contributors Update Summary"
        echo "=============================="
        echo ""
        echo "✅ Successfully updated contributor statistics!"
        echo ""
        echo "📊 Updated files:"
        echo "  - README.md (contributor list)"
        if [ -f "HALL_OF_FAME.md" ]; then
          echo "  - HALL_OF_FAME.md (last modified date)"
        fi
        echo ""
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "📅 Triggered by: PR #${{ github.event.pull_request.number }}"
          echo "👤 New contributor: @${{ github.event.pull_request.user.login }}"
        else
          echo "📅 Triggered by: ${{ github.event_name }}"
        fi
        echo ""
        echo "🎉 Changes pushed directly to main branch!"

    - name: 📋 Generate summary (no changes)
      if: steps.changes.outputs.has_changes == 'false'
      run: |
        echo "🏆 Contributors Update Summary"
        echo "=============================="
        echo ""
        echo "ℹ️  No changes needed - contributors list is already up to date"